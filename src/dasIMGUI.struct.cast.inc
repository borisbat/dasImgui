// this file is generated via daScript automatic C++ binder
// all user modifications will be lost after this file is re-generated

template <> struct cast_arg<ImGuiTableSortSpecs> {
	static __forceinline const ImGuiTableSortSpecs & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiTableSortSpecs *>::to(res);
	}
};
template <> struct cast_arg<ImGuiTableColumnSortSpecs> {
	static __forceinline const ImGuiTableColumnSortSpecs & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiTableColumnSortSpecs *>::to(res);
	}
};
template <> struct cast_arg<ImNewWrapper> {
	static __forceinline const ImNewWrapper & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImNewWrapper *>::to(res);
	}
};
template <> struct cast_arg<ImGuiStyle> {
	static __forceinline const ImGuiStyle & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiStyle *>::to(res);
	}
};
template <> struct cast_arg<ImGuiKeyData> {
	static __forceinline const ImGuiKeyData & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiKeyData *>::to(res);
	}
};
template <> struct cast_arg<ImGuiIO> {
	static __forceinline const ImGuiIO & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiIO *>::to(res);
	}
};
template <> struct cast_arg<ImGuiInputTextCallbackData> {
	static __forceinline const ImGuiInputTextCallbackData & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiInputTextCallbackData *>::to(res);
	}
};
template <> struct cast_arg<ImGuiSizeCallbackData> {
	static __forceinline const ImGuiSizeCallbackData & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiSizeCallbackData *>::to(res);
	}
};
template <> struct cast_arg<ImGuiWindowClass> {
	static __forceinline const ImGuiWindowClass & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiWindowClass *>::to(res);
	}
};
template <> struct cast_arg<ImGuiPayload> {
	static __forceinline const ImGuiPayload & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiPayload *>::to(res);
	}
};
template <> struct cast_arg<ImGuiOnceUponAFrame> {
	static __forceinline const ImGuiOnceUponAFrame & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiOnceUponAFrame *>::to(res);
	}
};
template <> struct cast_arg<ImGuiTextFilter::ImGuiTextRange> {
	static __forceinline const ImGuiTextFilter::ImGuiTextRange & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiTextFilter::ImGuiTextRange *>::to(res);
	}
};
template <> struct cast_arg<ImGuiTextFilter> {
	static __forceinline const ImGuiTextFilter & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiTextFilter *>::to(res);
	}
};
template <> struct cast_arg<ImGuiTextBuffer> {
	static __forceinline const ImGuiTextBuffer & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiTextBuffer *>::to(res);
	}
};
template <> struct cast_arg<ImGuiStorage::ImGuiStoragePair> {
	static __forceinline const ImGuiStorage::ImGuiStoragePair & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiStorage::ImGuiStoragePair *>::to(res);
	}
};
template <> struct cast_arg<ImGuiStorage> {
	static __forceinline const ImGuiStorage & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiStorage *>::to(res);
	}
};
template <> struct cast_arg<ImGuiListClipper> {
	static __forceinline const ImGuiListClipper & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiListClipper *>::to(res);
	}
};
template <> struct cast_arg<ImDrawCmd> {
	static __forceinline const ImDrawCmd & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawCmd *>::to(res);
	}
};
template <> struct cast_arg<ImDrawVert> {
	static __forceinline const ImDrawVert & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawVert *>::to(res);
	}
};
template <> struct cast_arg<ImDrawCmdHeader> {
	static __forceinline const ImDrawCmdHeader & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawCmdHeader *>::to(res);
	}
};
template <> struct cast_arg<ImDrawChannel> {
	static __forceinline const ImDrawChannel & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawChannel *>::to(res);
	}
};
template <> struct cast_arg<ImDrawListSplitter> {
	static __forceinline const ImDrawListSplitter & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawListSplitter *>::to(res);
	}
};
template <> struct cast_arg<ImDrawList> {
	static __forceinline const ImDrawList & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawList *>::to(res);
	}
};
template <> struct cast_arg<ImDrawData> {
	static __forceinline const ImDrawData & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImDrawData *>::to(res);
	}
};
template <> struct cast_arg<ImFontConfig> {
	static __forceinline const ImFontConfig & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImFontConfig *>::to(res);
	}
};
template <> struct cast_arg<ImFontGlyph> {
	static __forceinline const ImFontGlyph & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImFontGlyph *>::to(res);
	}
};
template <> struct cast_arg<ImFontGlyphRangesBuilder> {
	static __forceinline const ImFontGlyphRangesBuilder & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImFontGlyphRangesBuilder *>::to(res);
	}
};
template <> struct cast_arg<ImFontAtlasCustomRect> {
	static __forceinline const ImFontAtlasCustomRect & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImFontAtlasCustomRect *>::to(res);
	}
};
template <> struct cast_arg<ImFontAtlas> {
	static __forceinline const ImFontAtlas & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImFontAtlas *>::to(res);
	}
};
template <> struct cast_arg<ImFont> {
	static __forceinline const ImFont & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImFont *>::to(res);
	}
};
template <> struct cast_arg<ImGuiViewport> {
	static __forceinline const ImGuiViewport & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiViewport *>::to(res);
	}
};
template <> struct cast_arg<ImGuiPlatformIO> {
	static __forceinline const ImGuiPlatformIO & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiPlatformIO *>::to(res);
	}
};
template <> struct cast_arg<ImGuiPlatformMonitor> {
	static __forceinline const ImGuiPlatformMonitor & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiPlatformMonitor *>::to(res);
	}
};
template <> struct cast_arg<ImGuiPlatformImeData> {
	static __forceinline const ImGuiPlatformImeData & to ( Context & ctx, SimNode * node ) {
		vec4f res = node->eval(ctx);
		return * cast<ImGuiPlatformImeData *>::to(res);
	}
};
